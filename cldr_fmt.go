package intl

// Code generated by "earthly +generate". DO NOT EDIT.

import (
	"cmp"
	"strings"
	"time"

	"golang.org/x/text/language"
)

func defaultNumberingSystem(locale language.Tag) numberingSystem {
	s := locale.String()

	switch {
	default:
		return numberingSystemLatn
	case s == "ff-Adlm", strings.HasPrefix(s, "ff-Adlm-"):
		return numberingSystemAdlm
	case s == "ar", strings.HasPrefix(s, "ar-"),
		s == "ar-BH", strings.HasPrefix(s, "ar-BH-"),
		s == "ar-DJ", strings.HasPrefix(s, "ar-DJ-"),
		s == "ar-EG", strings.HasPrefix(s, "ar-EG-"),
		s == "ar-ER", strings.HasPrefix(s, "ar-ER-"),
		s == "ar-IL", strings.HasPrefix(s, "ar-IL-"),
		s == "ar-IQ", strings.HasPrefix(s, "ar-IQ-"),
		s == "ar-JO", strings.HasPrefix(s, "ar-JO-"),
		s == "ar-KM", strings.HasPrefix(s, "ar-KM-"),
		s == "ar-KW", strings.HasPrefix(s, "ar-KW-"),
		s == "ar-LB", strings.HasPrefix(s, "ar-LB-"),
		s == "ar-MR", strings.HasPrefix(s, "ar-MR-"),
		s == "ar-OM", strings.HasPrefix(s, "ar-OM-"),
		s == "ar-PS", strings.HasPrefix(s, "ar-PS-"),
		s == "ar-QA", strings.HasPrefix(s, "ar-QA-"),
		s == "ar-SA", strings.HasPrefix(s, "ar-SA-"),
		s == "ar-SD", strings.HasPrefix(s, "ar-SD-"),
		s == "ar-SO", strings.HasPrefix(s, "ar-SO-"),
		s == "ar-SS", strings.HasPrefix(s, "ar-SS-"),
		s == "ar-SY", strings.HasPrefix(s, "ar-SY-"),
		s == "ar-TD", strings.HasPrefix(s, "ar-TD-"),
		s == "ar-YE", strings.HasPrefix(s, "ar-YE-"),
		s == "ckb", strings.HasPrefix(s, "ckb-"),
		s == "sd", strings.HasPrefix(s, "sd-"),
		s == "sdh", strings.HasPrefix(s, "sdh-"):
		return numberingSystemArab
	case s == "az-Arab", strings.HasPrefix(s, "az-Arab-"),
		s == "bgn", strings.HasPrefix(s, "bgn-"),
		s == "fa", strings.HasPrefix(s, "fa-"),
		s == "ks", strings.HasPrefix(s, "ks-"),
		s == "lrc", strings.HasPrefix(s, "lrc-"),
		s == "mzn", strings.HasPrefix(s, "mzn-"),
		s == "pa-Arab", strings.HasPrefix(s, "pa-Arab-"),
		s == "ps", strings.HasPrefix(s, "ps-"),
		s == "ur-IN", strings.HasPrefix(s, "ur-IN-"),
		s == "uz-Arab", strings.HasPrefix(s, "uz-Arab-"):
		return numberingSystemArabext
	case s == "as", strings.HasPrefix(s, "as-"),
		s == "bn", strings.HasPrefix(s, "bn-"),
		s == "mni", strings.HasPrefix(s, "mni-"):
		return numberingSystemBeng
	case s == "ccp", strings.HasPrefix(s, "ccp-"):
		return numberingSystemCakm
	case s == "bgc", strings.HasPrefix(s, "bgc-"),
		s == "bho", strings.HasPrefix(s, "bho-"),
		s == "mr", strings.HasPrefix(s, "mr-"),
		s == "ne", strings.HasPrefix(s, "ne-"),
		s == "raj", strings.HasPrefix(s, "raj-"),
		s == "sa", strings.HasPrefix(s, "sa-"),
		s == "sat-Deva", strings.HasPrefix(s, "sat-Deva-"):
		return numberingSystemDeva
	case s == "hnj", strings.HasPrefix(s, "hnj-"):
		return numberingSystemHmnp
	case s == "ar-AE", strings.HasPrefix(s, "ar-AE-"),
		s == "ar-DZ", strings.HasPrefix(s, "ar-DZ-"),
		s == "ar-EH", strings.HasPrefix(s, "ar-EH-"),
		s == "ar-LY", strings.HasPrefix(s, "ar-LY-"),
		s == "ar-MA", strings.HasPrefix(s, "ar-MA-"),
		s == "ar-TN", strings.HasPrefix(s, "ar-TN-"):
		return numberingSystemLatn
	case s == "mni-Mtei", strings.HasPrefix(s, "mni-Mtei-"):
		return numberingSystemMtei
	case s == "my", strings.HasPrefix(s, "my-"):
		return numberingSystemMymr
	case s == "nqo", strings.HasPrefix(s, "nqo-"):
		return numberingSystemNkoo
	case s == "sat", strings.HasPrefix(s, "sat-"):
		return numberingSystemOlck
	case s == "dz", strings.HasPrefix(s, "dz-"):
		return numberingSystemTibt
	}
}

func defaultCalendar(locale language.Tag) calendarType {
	switch v, _ := locale.Region(); v.String() {
	default:
		return calendarTypeGregorian
	case "AF", "IR":
		return calendarTypePersian
	case "SA":
		return calendarTypeIslamicUmalqura
	case "TH":
		return calendarTypeBuddhist
	}
}

func fmtYearBuddhist(locale language.Tag) func(v string) string {
	lang, _ := locale.Base()

	switch lang.String() {
	default:
		return func(v string) string { return "AP " + v }
	case "th":
		return func(v string) string { return "G" + " " + v }
	}
}

func fmtYearMonthBuddhist(locale language.Tag, digits digits, opts Options) func(y int, m time.Month) string {
	fmtYear := fmtYear(digits)
	fmtMonth := fmtMonth(digits)

	switch language, _ := locale.Base(); language.String() {
	default:
		return func(y int, m time.Month) string {
			return "GGGGG" + " " + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "-" + fmtMonth(m, Month2Digit)
		}
	case "th":
		return func(y int, m time.Month) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	}
}

func fmtMonthBuddhist(_ language.Tag, digits digits) func(v time.Month, opt Month) string {
	return fmtMonth(digits)
}

func fmtMonthDayBuddhist(locale language.Tag, digits digits, opts Options) func(m time.Month, d int) string {
	lang, _ := locale.Base()

	fmtMonth := fmtMonth(digits)
	fmtDay := fmtDay(digits)

	switch lang.String() {
	default:
		return func(m time.Month, d int) string { return fmtMonth(m, Month2Digit) + "-" + fmtDay(d, Day2Digit) }
	case "th":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "/" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	}
}

func fmtDayBuddhist(_ language.Tag, digits digits) func(v int, opt Day) string {
	fmt := fmtDay(digits)

	return fmt
}

func fmtYearGregorian(locale language.Tag) func(v string) string {
	lang, _ := locale.Base()

	switch lang.String() {
	default:
		return func(v string) string { return v }
	case "lv":
		return func(v string) string { return v + ". g." }
	case "bs", "hr", "hu", "sr":
		return func(v string) string { return v + "." }
	case "bg":
		return func(v string) string { return v + " г." }
	case "ja", "yue", "zh":
		return func(v string) string { return v + "年" }
	case "ko":
		return func(v string) string { return v + "년" }
	}
}

func fmtYearMonthGregorian(locale language.Tag, digits digits, opts Options) func(y int, m time.Month) string {
	fmtYear := fmtYear(digits)
	fmtMonth := fmtMonth(digits)

	switch language, _ := locale.Base(); language.String() {
	default:
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "-" + fmtMonth(m, Month2Digit)
		}
	case "bs":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtMonth(m, Month2Digit) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			}
			return fmtMonth(m, MonthNumeric) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "om", "yi":
		return func(y int, m time.Month) string {
			ys := fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			ms := fmtMonth(m, Month2Digit)
			if opts.Month == MonthNumeric {
				return ys + "-" + ms
			}
			return ms + "/" + ys
		}
	case "zh":
		return func(y int, m time.Month) string {
			ys := fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			ms := fmtMonth(m, MonthNumeric)
			if opts.Month == MonthNumeric {
				return ys + "/" + ms
			}
			return ys + "年" + ms + "月"
		}
	case "tr":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtMonth(m, Month2Digit) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			}
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "sr":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + ". " + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "."
			}
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "."
		}
	case "vi":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			}
			return "tháng " + fmtMonth(m, Month2Digit) + ", " + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "bn", "ccp", "gu", "kn", "mr", "or", "ta", "te", "to":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			}
			return fmtMonth(m, Month2Digit) + "-" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "de":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
			}
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "gsw":
		return func(y int, m time.Month) string {
			if opts.Month == MonthNumeric {
				return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "-" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
			}
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "kkj":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + " " + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "af", "as", "ia", "jv", "mi", "rm", "tg", "wo":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + "-" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "hr":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + ". " + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "."
		}
	case "az", "cv", "fo", "hy", "kk", "ku", "os", "pl", "ro", "ru", "tk", "tt", "uk", "uz":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "lv":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "."
		}
	case "bg":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + " г."
		}
	case "br", "fr", "ga", "it", "iu", "kea", "kgp", "pt", "sc", "seh", "syr", "vec", "yrl":
		return func(y int, m time.Month) string {
			return fmtMonth(m, Month2Digit) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "fi", "he":
		return func(y int, m time.Month) string {
			return fmtMonth(m, MonthNumeric) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "es", "ti":
		return func(y int, m time.Month) string {
			return fmtMonth(m, MonthNumeric) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "fy", "kok", "ms", "nl", "ug":
		return func(y int, m time.Month) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "-" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "is":
		return func(y int, m time.Month) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + ". " + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "be", "da", "dsb", "et", "hsb", "ka", "lb", "mk", "nb", "nn", "no", "smn", "sq":
		return func(y int, m time.Month) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "." + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "agq", "ak", "am", "asa", "ast", "bas", "bem", "bez", "blo", "bm", "brx", "ca", "ceb", "cgg", "chr", "ckb", "cs", "cy", "dav", "dje", "doi", "dua", "dyo", "ebu", "ee", "el", "en", "ewo", "ff", "fil", "fur", "gd", "gl", "guz", "ha", "haw", "hi", "id", "ig", "jmc", "kab", "kam", "kde", "khq", "ki", "kln", "km", "ks", "ksb", "ksf", "kxv", "lag", "lg", "ln", "lo", "lu", "luo", "luy", "mai", "mas", "mer", "mfe", "mg", "mgh", "mni", "mua", "my", "naq", "nd", "nmg", "nus", "nyn", "pa", "pcm", "rn", "rof", "rwk", "sa", "saq", "sbp", "ses", "sg", "shi", "sk", "sl", "so", "su", "sw", "teo", "twq", "tzm", "ur", "vai", "vun", "xh", "xnr", "xog", "yav", "yo", "zgh":
		return func(y int, m time.Month) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "ar":
		return func(y int, m time.Month) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "‏/" + fmtYear(y, cmp.Or(opts.Year, YearNumeric))
		}
	case "mn":
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + " " + fmtMonthName(locale.String(), "stand-alone", "narrow")(m, opts.Month)
		}
	case "dz", "si":
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "-" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "ko":
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + ". " + fmtMonth(m, MonthNumeric) + "."
		}
	case "hu":
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + ". " + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "."
		}
	case "eu", "ja", "yue":
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "/" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	}
}

func fmtMonthGregorian(locale language.Tag, digits digits) func(v time.Month, opt Month) string {
	lang, _ := locale.Base()

	switch lang.String() {
	default:
		return fmtMonth(digits)
	case "br", "fo", "ga", "lt", "uk", "uz":
		fmt := fmtMonth(digits)
		return func(v time.Month, opt Month) string { return fmt(v, Month2Digit) }
	case "hr", "nb", "nn", "no", "sk":
		fmt := fmtMonth(digits)
		return func(v time.Month, opt Month) string { return fmt(v, opt) + "." }
	case "ja", "yue", "zh":
		fmt := fmtMonth(digits)
		return func(v time.Month, opt Month) string { return fmt(v, opt) + "月" }
	case "ko":
		fmt := fmtMonth(digits)
		return func(v time.Month, opt Month) string { return fmt(v, opt) + "월" }
	case "wae":
		return fmtMonthName(locale.String(), "stand-alone", "abbreviated")
	case "mn":
		return fmtMonthName(locale.String(), "stand-alone", "narrow")
	}
}

func fmtMonthDayGregorian(locale language.Tag, digits digits, opts Options) func(m time.Month, d int) string {
	lang, _ := locale.Base()

	fmtMonth := fmtMonth(digits)
	fmtDay := fmtDay(digits)

	switch lang.String() {
	default:
		return func(m time.Month, d int) string { return fmtMonth(m, Month2Digit) + "-" + fmtDay(d, Day2Digit) }
	case "af", "as", "ia", "ky", "mi", "rm", "tg", "wo":
		return func(m time.Month, d int) string { return fmtDay(d, Day2Digit) + "-" + fmtMonth(m, Month2Digit) }
	case "lv":
		return func(m time.Month, d int) string { return fmtDay(d, Day2Digit) + "." + fmtMonth(m, Month2Digit) + "." }
	case "az", "cv", "fo", "hy", "kk", "ku", "os", "tk", "tt", "uk":
		return func(m time.Month, d int) string { return fmtDay(d, Day2Digit) + "." + fmtMonth(m, Month2Digit) }
	case "br", "fr", "ga", "it", "jv", "kkj", "sc", "syr", "uz", "vec":
		return func(m time.Month, d int) string { return fmtDay(d, Day2Digit) + "/" + fmtMonth(m, Month2Digit) }
	case "nb", "nn", "no":
		return func(m time.Month, d int) string { return fmtDay(d, DayNumeric) + "." + fmtMonth(m, MonthNumeric) + "." }
	case "sq":
		return func(m time.Month, d int) string { return fmtDay(d, DayNumeric) + "." + fmtMonth(m, MonthNumeric) }
	case "es", "ti":
		return func(m time.Month, d int) string { return fmtDay(d, DayNumeric) + "/" + fmtMonth(m, MonthNumeric) }
	case "pcm":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + " /" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "fy", "kok", "nl", "ug":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "-" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "cs", "sk", "sl":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + ". " + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "."
		}
	case "de", "dsb", "fi", "gsw", "hsb", "is", "lb", "smn":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "." + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "."
		}
	case "be", "da", "et", "he", "jgo", "ka":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "." + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "agq", "ast", "bas", "bm", "ca", "cy", "dje", "doi", "dua", "dyo", "el", "ewo", "ff", "fur", "gd", "gl", "haw", "hi", "id", "ig", "kab", "kgp", "khq", "km", "ksf", "kxv", "ln", "lo", "lu", "mai", "mfe", "mg", "mgh", "ml", "mni", "mua", "my", "nmg", "nus", "pa", "rn", "sa", "seh", "ses", "sg", "shi", "su", "sw", "to", "tr", "twq", "ur", "xnr", "yav", "yo", "yrl", "zgh":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "/" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "ar":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "‏/" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "iu":
		return func(m time.Month, d int) string { return fmtMonth(m, Month2Digit) + "/" + fmtDay(d, Day2Digit) }
	case "dz", "si":
		return func(m time.Month, d int) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "-" + fmtDay(d, cmp.Or(opts.Day, DayNumeric))
		}
	case "hu", "ko":
		return func(m time.Month, d int) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + ". " + fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + "."
		}
	case "ak", "am", "asa", "bem", "bez", "blo", "brx", "ceb", "cgg", "chr", "dav", "ebu", "ee", "en", "eu", "fil", "guz", "ha", "ja", "jmc", "kam", "kde", "ki", "kln", "ks", "ksb", "lag", "lg", "luo", "luy", "mas", "mer", "naq", "nd", "nyn", "rof", "rwk", "saq", "sbp", "so", "teo", "tzm", "vai", "vun", "xh", "xog", "yue", "zh":
		return func(m time.Month, d int) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtDay(d, cmp.Or(opts.Day, DayNumeric))
		}
	case "wae":
		fmtMonth = fmtMonthName(locale.String(), "stand-alone", "abbreviated")
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, DayNumeric)) + ". " + fmtMonth(m, opts.Month)
		}
	case "mn":
		fmtMonth = fmtMonthName(locale.String(), "stand-alone", "narrow")
		return func(m time.Month, d int) string { return fmtMonth(m, opts.Month) + "/" + fmtDay(d, Day2Digit) }
	case "sv":
		return func(m time.Month, d int) string {
			if opts.Month == Month2Digit && opts.Day == DayNumeric {
				return fmtDay(d, DayNumeric) + "/" + fmtMonth(m, MonthNumeric)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "/" + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "hr":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, Day2Digit) + ". " + fmtMonth(m, Month2Digit) + "."
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + ". " + fmtMonth(m, cmp.Or(opts.Month, Month2Digit)) + "."
		}
	case "ro", "ru":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, Day2Digit) + "." + fmtMonth(m, Month2Digit)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "." + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "kea", "pt":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, Day2Digit) + "/" + fmtMonth(m, Month2Digit)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "/" + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "ms":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, DayNumeric) + "-" + fmtMonth(m, MonthNumeric)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "/" + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "sr":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, DayNumeric) + ". " + fmtMonth(m, MonthNumeric) + "."
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "." + fmtMonth(m, cmp.Or(opts.Month, Month2Digit)) + "."
		}
	case "bs":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, DayNumeric) + "." + fmtMonth(m, MonthNumeric) + "."
			}
			return fmtDay(d, DayNumeric) + ". " + fmtMonth(m, MonthNumeric) + "."
		}
	case "bn", "ccp", "gu", "kn", "mr", "ta", "te", "vi":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtDay(d, DayNumeric) + "/" + fmtMonth(m, MonthNumeric)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "-" + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "om":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtMonth(m, Month2Digit) + "-" + fmtDay(d, Day2Digit)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "/" + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "lt":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtMonth(m, Month2Digit) + "-" + fmtDay(d, DayNumeric)
			}
			return fmtMonth(m, cmp.Or(opts.Month, Month2Digit)) + "-" + fmtDay(d, cmp.Or(opts.Day, Day2Digit))
		}
	case "or":
		return func(m time.Month, d int) string {
			if opts.Month == MonthNumeric && opts.Day == DayNumeric {
				return fmtMonth(m, MonthNumeric) + "/" + fmtDay(d, DayNumeric)
			}
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "-" + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "mk":
		return func(m time.Month, d int) string {
			return fmtDay(d, DayNumeric) + "." + fmtMonth(m, cmp.Or(opts.Month, Month2Digit))
		}
	case "bg", "pl":
		return func(m time.Month, d int) string {
			return fmtDay(d, cmp.Or(opts.Day, Day2Digit)) + "." + fmtMonth(m, Month2Digit)
		}
	}
}

func fmtDayGregorian(locale language.Tag, digits digits) func(v int, opt Day) string {
	lang, _ := locale.Base()

	fmt := fmtDay(digits)

	switch lang.String() {
	default:
		return fmt
	case "lt":
		return func(v int, opt Day) string { return fmt(v, Day2Digit) }
	case "bs", "cs", "da", "dsb", "fo", "hr", "hsb", "nb", "nn", "no", "sk", "sl":
		return func(v int, opt Day) string { return fmt(v, opt) + "." }
	case "ja", "yue", "zh":
		return func(v int, opt Day) string { return fmt(v, opt) + "日" }
	case "ko":
		return func(v int, opt Day) string { return fmt(v, opt) + "일" }
	}
}

func fmtYearPersian(locale language.Tag) func(v string) string {
	lang, _ := locale.Base()

	switch lang.String() {
	default:
		return func(v string) string { return "AP " + v }
	case "lrc", "mzn", "ps", "sdh":
		return func(v string) string { return "G" + " " + v }
	case "fa":
		return func(v string) string { return v }
	}
}

func fmtYearMonthPersian(locale language.Tag, digits digits, opts Options) func(y int, m time.Month) string {
	fmtYear := fmtYear(digits)
	fmtMonth := fmtMonth(digits)

	switch language, _ := locale.Base(); language.String() {
	default:
		return func(y int, m time.Month) string {
			return "GGGGG" + " " + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "-" + fmtMonth(m, Month2Digit)
		}
	case "ps":
		return func(y int, m time.Month) string {
			return "G" + " " + fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "/" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	case "fa":
		return func(y int, m time.Month) string {
			return fmtYear(y, cmp.Or(opts.Year, YearNumeric)) + "/" + fmtMonth(m, cmp.Or(opts.Month, MonthNumeric))
		}
	}
}

func fmtMonthPersian(_ language.Tag, digits digits) func(v time.Month, opt Month) string {
	return fmtMonth(digits)
}

func fmtMonthDayPersian(locale language.Tag, digits digits, opts Options) func(m time.Month, d int) string {
	lang, _ := locale.Base()

	fmtMonth := fmtMonth(digits)
	fmtDay := fmtDay(digits)

	switch lang.String() {
	default:
		return func(m time.Month, d int) string { return fmtMonth(m, Month2Digit) + "-" + fmtDay(d, Day2Digit) }
	case "fa", "ps":
		return func(m time.Month, d int) string {
			return fmtMonth(m, cmp.Or(opts.Month, MonthNumeric)) + "/" + fmtDay(d, cmp.Or(opts.Day, DayNumeric))
		}
	}
}

func fmtDayPersian(_ language.Tag, digits digits) func(v int, opt Day) string {
	fmt := fmtDay(digits)

	return fmt
}
