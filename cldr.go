//	root -> 'az-Arab'
//		+.Dates
//	root -> 'az-Cyrl'
//	root -> 'bal-Latn'
//	root -> 'bm-Nkoo'
//	root -> 'bs-Cyrl'
//	root -> 'en-Dsrt'
//	root -> 'en-Shaw'
//	root -> 'ff-Adlm'
//	root -> 'ha-Arab'
//	root -> 'iu-Latn'
//		+.Dates
//	root -> 'ks-Deva'
//	root -> 'kxv-Deva'
//	root -> 'kxv-Orya'
//	root -> 'kxv-Telu'
//	root -> 'mn-Mong'
//		+.Dates
//	root -> 'mni-Mtei'
//	root -> 'ms-Arab'
//	root -> 'pa-Arab'
//	root -> 'sat-Deva'
//	root -> 'sd-Deva'
//	root -> 'shi-Latn'
//	root -> 'sr-Latn'
//	root -> 'uz-Arab'
//	root -> 'uz-Cyrl'
//	root -> 'vai-Latn'
//	root -> 'yue-Hans'
//	root -> 'zh-Hant'
//	en-001 -> 'en-150'
//	en-001 -> 'en-AG'
//		+.Dates
//	en-001 -> 'en-AI'
//	en-001 -> 'en-AU'
//	en-001 -> 'en-BB'
//		+.Dates
//	en-001 -> 'en-BM'
//		+.Dates
//	en-001 -> 'en-BS'
//		+.Dates
//	en-001 -> 'en-BW'
//	en-001 -> 'en-BZ'
//	en-001 -> 'en-CC'
//	en-001 -> 'en-CK'
//	en-001 -> 'en-CM'
//	en-001 -> 'en-CX'
//	en-001 -> 'en-CY'
//		+.Dates
//	en-001 -> 'en-DG'
//	en-001 -> 'en-DM'
//		+.Dates
//	en-001 -> 'en-ER'
//		+.Dates.Calendars
//	en-001 -> 'en-FJ'
//		+.Dates
//	en-001 -> 'en-FK'
//	en-001 -> 'en-FM'
//		+.Dates
//	en-001 -> 'en-GB'
//	en-001 -> 'en-GD'
//		+.Dates
//	en-001 -> 'en-GG'
//	en-001 -> 'en-GH'
//		+.Dates.Calendars
//	en-001 -> 'en-GI'
//	en-001 -> 'en-GM'
//		+.Dates.Calendars
//	en-001 -> 'en-GY'
//		+.Dates.Calendars
//	en-001 -> 'en-HK'
//	en-001 -> 'en-ID'
//	en-001 -> 'en-IE'
//	en-001 -> 'en-IL'
//	en-001 -> 'en-IM'
//	en-001 -> 'en-IN'
//	en-001 -> 'en-IO'
//	en-001 -> 'en-JE'
//	en-001 -> 'en-JM'
//	en-001 -> 'en-KE'
//	en-001 -> 'en-KI'
//		+.Dates
//	en-001 -> 'en-KN'
//		+.Dates
//	en-001 -> 'en-KY'
//		+.Dates
//	en-001 -> 'en-LC'
//		+.Dates
//	en-001 -> 'en-LR'
//		+.Dates.Calendars
//	en-001 -> 'en-LS'
//		+.Dates.Calendars
//	en-001 -> 'en-MG'
//	en-001 -> 'en-MO'
//		+.Dates.Calendars
//	en-001 -> 'en-MS'
//	en-001 -> 'en-MT'
//	en-001 -> 'en-MU'
//	en-001 -> 'en-MV'
//	en-001 -> 'en-MW'
//		+.Dates.Calendars
//	en-001 -> 'en-MY'
//		+.Dates.Calendars
//	en-001 -> 'en-NA'
//		+.Dates.Calendars
//	en-001 -> 'en-NF'
//	en-001 -> 'en-NG'
//	en-001 -> 'en-NR'
//	en-001 -> 'en-NU'
//	en-001 -> 'en-NZ'
//	en-001 -> 'en-PG'
//		+.Dates
//	en-001 -> 'en-PK'
//	en-001 -> 'en-PN'
//	en-001 -> 'en-PW'
//		+.Dates
//	en-001 -> 'en-RW'
//	en-001 -> 'en-SB'
//		+.Dates
//	en-001 -> 'en-SC'
//	en-001 -> 'en-SD'
//		+.Dates.Calendars
//	en-001 -> 'en-SG'
//	en-001 -> 'en-SH'
//	en-001 -> 'en-SL'
//		+.Dates.Calendars
//	en-001 -> 'en-SS'
//		+.Dates.Calendars
//	en-001 -> 'en-SX'
//	en-001 -> 'en-SZ'
//		+.Dates.Calendars
//	en-001 -> 'en-TC'
//		+.Dates
//	en-001 -> 'en-TK'
//	en-001 -> 'en-TO'
//		+.Dates
//	en-001 -> 'en-TT'
//		+.Dates
//	en-001 -> 'en-TV'
//	en-001 -> 'en-TZ'
//	en-001 -> 'en-UG'
//	en-001 -> 'en-VC'
//		+.Dates
//	en-001 -> 'en-VG'
//		+.Dates
//	en-001 -> 'en-VU'
//		+.Dates
//	en-001 -> 'en-WS'
//		+.Dates
//	en-001 -> 'en-ZA'
//	en-001 -> 'en-ZM'
//		+.Dates.Calendars
//	en-001 -> 'en-ZW'
//	en-150 -> 'en-AT'
//		+.Dates
//	en-150 -> 'en-BE'
//	en-150 -> 'en-CH'
//	en-150 -> 'en-DE'
//		+.Dates
//	en-150 -> 'en-DK'
//	en-150 -> 'en-FI'
//	en-150 -> 'en-NL'
//		+.Dates
//	en-150 -> 'en-SE'
//	en-150 -> 'en-SI'
//		+.Dates
//	en-IN -> 'hi-Latn'
//	es-419 -> 'es-AR'
//	es-419 -> 'es-BO'
//	es-419 -> 'es-BR'
//	es-419 -> 'es-BZ'
//	es-419 -> 'es-CL'
//	es-419 -> 'es-CO'
//	es-419 -> 'es-CR'
//	es-419 -> 'es-CU'
//		+.Dates
//	es-419 -> 'es-DO'
//	es-419 -> 'es-EC'
//	es-419 -> 'es-GT'
//	es-419 -> 'es-HN'
//	es-419 -> 'es-MX'
//	es-419 -> 'es-NI'
//	es-419 -> 'es-PA'
//	es-419 -> 'es-PE'
//	es-419 -> 'es-PR'
//	es-419 -> 'es-PY'
//	es-419 -> 'es-SV'
//	es-419 -> 'es-US'
//	es-419 -> 'es-UY'
//	es-419 -> 'es-VE'
//	no -> 'nb'
//		+.Dates
//	no -> 'nn'
//	pt-PT -> 'pt-AO'
//		+.Dates.Calendars
//	pt-PT -> 'pt-CH'
//		+.Dates
//	pt-PT -> 'pt-CV'
//		+.Dates.Calendars
//	pt-PT -> 'pt-GQ'
//		+.Dates
//	pt-PT -> 'pt-GW'
//		+.Dates.Calendars
//	pt-PT -> 'pt-LU'
//		+.Dates
//	pt-PT -> 'pt-MO'
//	pt-PT -> 'pt-MZ'
//		+.Dates.Calendars
//	pt-PT -> 'pt-ST'
//		+.Dates.Calendars
//	pt-PT -> 'pt-TL'
//		+.Dates.Calendars
//	zh-Hant-HK -> 'zh-Hant-MO'
//		+.Dates
// Code generated by "earthly +cldr". DO NOT EDIT.
package intl

import (
  "strconv"
  "strings"
  "time"

  "golang.org/x/text/language"
	ptime "github.com/yaa110/go-persian-calendar"
)

type numberingSystem int

const (
  numberingSystemLatn numberingSystem = iota
  numberingSystemAdlm
  numberingSystemArab
  numberingSystemArabext
  numberingSystemBeng
  numberingSystemCakm
  numberingSystemDeva
  numberingSystemHmnp
  numberingSystemMtei
  numberingSystemMymr
  numberingSystemNkoo
  numberingSystemOlck
  numberingSystemTibt
  numberingSystemLast
)

var numberingSystems = []digits{
  numberingSystemAdlm: {'𞥐','𞥑','𞥒','𞥓','𞥔','𞥕','𞥖','𞥗','𞥘','𞥙',},
  numberingSystemArab: {'٠','١','٢','٣','٤','٥','٦','٧','٨','٩',},
  numberingSystemArabext: {'۰','۱','۲','۳','۴','۵','۶','۷','۸','۹',},
  numberingSystemBeng: {'০','১','২','৩','৪','৫','৬','৭','৮','৯',},
  numberingSystemCakm: {'𑄶','𑄷','𑄸','𑄹','𑄺','𑄻','𑄼','𑄽','𑄾','𑄿',},
  numberingSystemDeva: {'०','१','२','३','४','५','६','७','८','९',},
  numberingSystemHmnp: {'𞅀','𞅁','𞅂','𞅃','𞅄','𞅅','𞅆','𞅇','𞅈','𞅉',},
  numberingSystemMtei: {'꯰','꯱','꯲','꯳','꯴','꯵','꯶','꯷','꯸','꯹',},
  numberingSystemMymr: {'၀','၁','၂','၃','၄','၅','၆','၇','၈','၉',},
  numberingSystemNkoo: {'߀','߁','߂','߃','߄','߅','߆','߇','߈','߉',},
  numberingSystemOlck: {'᱐','᱑','᱒','᱓','᱔','᱕','᱖','᱗','᱘','᱙',},
  numberingSystemTibt: {'༠','༡','༢','༣','༤','༥','༦','༧','༨','༩',},
}

func defaultNumberingSystem(locale language.Tag) numberingSystem {
  s := locale.String()

  switch {
  default:
    return numberingSystemLatn
  case s == "ff-Adlm", strings.HasPrefix(s, "ff-Adlm-"):
    return numberingSystemAdlm
  case s == "ar", strings.HasPrefix(s, "ar-"), s == "ar-BH", strings.HasPrefix(s, "ar-BH-"), s == "ar-DJ", strings.HasPrefix(s, "ar-DJ-"), s == "ar-EG", strings.HasPrefix(s, "ar-EG-"), s == "ar-ER", strings.HasPrefix(s, "ar-ER-"), s == "ar-IL", strings.HasPrefix(s, "ar-IL-"), s == "ar-IQ", strings.HasPrefix(s, "ar-IQ-"), s == "ar-JO", strings.HasPrefix(s, "ar-JO-"), s == "ar-KM", strings.HasPrefix(s, "ar-KM-"), s == "ar-KW", strings.HasPrefix(s, "ar-KW-"), s == "ar-LB", strings.HasPrefix(s, "ar-LB-"), s == "ar-MR", strings.HasPrefix(s, "ar-MR-"), s == "ar-OM", strings.HasPrefix(s, "ar-OM-"), s == "ar-PS", strings.HasPrefix(s, "ar-PS-"), s == "ar-QA", strings.HasPrefix(s, "ar-QA-"), s == "ar-SA", strings.HasPrefix(s, "ar-SA-"), s == "ar-SD", strings.HasPrefix(s, "ar-SD-"), s == "ar-SO", strings.HasPrefix(s, "ar-SO-"), s == "ar-SS", strings.HasPrefix(s, "ar-SS-"), s == "ar-SY", strings.HasPrefix(s, "ar-SY-"), s == "ar-TD", strings.HasPrefix(s, "ar-TD-"), s == "ar-YE", strings.HasPrefix(s, "ar-YE-"), s == "ckb", strings.HasPrefix(s, "ckb-"), s == "sd", strings.HasPrefix(s, "sd-"), s == "sdh", strings.HasPrefix(s, "sdh-"):
    return numberingSystemArab
  case s == "fa", strings.HasPrefix(s, "fa-"), s == "ks", strings.HasPrefix(s, "ks-"), s == "lrc", strings.HasPrefix(s, "lrc-"), s == "pa-Arab", strings.HasPrefix(s, "pa-Arab-"), s == "ps", strings.HasPrefix(s, "ps-"), s == "ur-IN", strings.HasPrefix(s, "ur-IN-"), s == "uz-Arab", strings.HasPrefix(s, "uz-Arab-"):
    return numberingSystemArabext
  case s == "as", strings.HasPrefix(s, "as-"), s == "bn", strings.HasPrefix(s, "bn-"), s == "mni", strings.HasPrefix(s, "mni-"):
    return numberingSystemBeng
  case s == "ccp", strings.HasPrefix(s, "ccp-"):
    return numberingSystemCakm
  case s == "bgc", strings.HasPrefix(s, "bgc-"), s == "bho", strings.HasPrefix(s, "bho-"), s == "mr", strings.HasPrefix(s, "mr-"), s == "ne", strings.HasPrefix(s, "ne-"), s == "raj", strings.HasPrefix(s, "raj-"), s == "sa", strings.HasPrefix(s, "sa-"), s == "sat-Deva", strings.HasPrefix(s, "sat-Deva-"):
    return numberingSystemDeva
  case s == "hnj", strings.HasPrefix(s, "hnj-"):
    return numberingSystemHmnp
  case s == "ar-AE", strings.HasPrefix(s, "ar-AE-"), s == "ar-DZ", strings.HasPrefix(s, "ar-DZ-"), s == "ar-EH", strings.HasPrefix(s, "ar-EH-"), s == "ar-LY", strings.HasPrefix(s, "ar-LY-"), s == "ar-MA", strings.HasPrefix(s, "ar-MA-"), s == "ar-TN", strings.HasPrefix(s, "ar-TN-"):
    return numberingSystemLatn
  case s == "mni-Mtei", strings.HasPrefix(s, "mni-Mtei-"):
    return numberingSystemMtei
  case s == "my", strings.HasPrefix(s, "my-"):
    return numberingSystemMymr
  case s == "nqo", strings.HasPrefix(s, "nqo-"):
    return numberingSystemNkoo
  case s == "sat", strings.HasPrefix(s, "sat-"):
    return numberingSystemOlck
  case s == "dz", strings.HasPrefix(s, "dz-"):
    return numberingSystemTibt
  }
}

func defaultCalendar(locale language.Tag) string {
  switch v, _ := locale.Region(); v.String() {
  default:
    return "gregorian"
  case "AF", "IR":
    return "persian"
  case "SA":
    return "islamic-umalqura"
  case "TH":
    return "buddhist"
  }
}


func fmtYearGregorian(locale language.Tag) func(string) string {
  lang, _ := locale.Base()

  switch lang.String() {
  default:
    return func(y string) string { return y }
  case "lv":
    return func (y string) string { return y+". g." }
  case "bs", "hr", "hu", "sr":
    return func (y string) string { return y+"." }
  case "bg":
    return func (y string) string { return y+" г." }
  case "ja", "yue", "zh":
    return func (y string) string { return y+"年" }
  case "ko":
    return func (y string) string { return y+"년" }
  }
}

func fmtDayGregorian(locale language.Tag, digits digits) func(day int, format string) string {
  lang, _ := locale.Base()

  fmt := func(d int, f string) string {
    if f == "02" && d <= 9 {
      return digits.Sprint("0"+strconv.Itoa(d))
    }

    return digits.Sprint(strconv.Itoa(d))
  }


  switch lang.String() {
  default:
    return fmt
  case "lt":
    return func(d int, f string) string { return fmt(d, "02") }
  case "bs", "cs", "da", "dsb", "fo", "hr", "hsb", "nb", "no", "sk", "sl":
    return func(d int, f string) string { return fmt(d, f)+"." }
  case "ja", "yue", "zh":
    return func(d int, f string) string { return fmt(d, f)+"日" }
  case "ko":
    return func(d int, f string) string { return fmt(d, f)+"일" }
  }
}

func fmtYearPersian(locale language.Tag) func(string) string {
  lang, _ := locale.Base()

  switch lang.String() {
  default:
    return func(y string) string { return "AP "+y }
  case "fa":
    return func (y string) string { return y }
  }
}

func fmtDayPersian(locale language.Tag, digits digits) func(day int, format string) string {
  lang, _ := locale.Base()

  fmt := func(d int, f string) string {
    if f == "02" && d <= 9 {
      return digits.Sprint("0"+strconv.Itoa(d))
    }

    return digits.Sprint(strconv.Itoa(d))
  }


  switch lang.String() {
  default:
    return fmt
  }
}



type gregorianDateTimeFormat struct {
  time    time.Time
  fmtYear func(format string) string
  fmtDay  func(day int, format string) string
  digits  digits
}

func (f *gregorianDateTimeFormat) SetTime(v time.Time) {
  f.time = v
}

func (f *gregorianDateTimeFormat) Year(format string) string {
  return f.fmtYear(f.digits.Sprint(f.time.Format(format)))
}

func (f *gregorianDateTimeFormat) Day(format string) string {
  return f.fmtDay(f.time.Day(), format)
}

type persianDateTimeFormat struct {
  time    ptime.Time
  fmtYear func(format string) string
  fmtDay  func(day int, format string) string
  digits  digits
}

func (f *persianDateTimeFormat) SetTime(v time.Time) {
  f.time = ptime.New(v)
}

func (f *persianDateTimeFormat) Year(format string) string {
  switch format {
  case "06":
    format = "yy"
  case "2006":
    format = "y"
  }

  return f.fmtYear(f.digits.Sprint(f.time.Format(format)))
}

func (f *persianDateTimeFormat) Day(format string) string {
  return f.fmtDay(f.time.Day(), format)
}