package intl

// Code generated by "earthly +generate". DO NOT EDIT.

type fields struct {
  Month, Day string
}

var fieldsLookup = map[string]fields{
{{- range $locale, $field := .Fields }}
  "{{ $locale }}": {Month: "{{ $field.Month }}", Day: "{{ $field.Day }}"},
{{- end }}
}

// era contains era names: 0 - narrow, 1 - short, 2 - long.
// The index is the value of iota [Era].
type era [3]string

var eraLookup = map[string]era{
{{-  range $locale, $era := .Eras }}
  "{{ $locale }}": {"{{ $era.Narrow }}", "{{ $era.Short }}", "{{ $era.Long }}"},
{{- end }}
}

type calendarMonths [12]string

var calendarMonthNames = [...]calendarMonths{
{{- range $calendarMonths := .Months.List }}
  {{ $calendarMonths }},
{{- end }}
}

// monthIndexes contains indexes of months names in Gregorian calendar, it has 6 indexes
// for all variations of "width" and "context".
//	0 - abbreviated, format
//	1 - abbreviated, stand-alone
//	2 - wide, format
//	3 - wide, stand-alone
//	4 - narrow, format
//	5 - narrow, stand-alone
type monthIndexes [6]int16

var monthLookup = map[string]monthIndexes{
{{- range $locale, $indexes := .Months.Lookup }}
  "{{ $locale }}": { {{ range $i, $v := $indexes }}{{ $v }},{{ end }} },
{{- end }}
}

type numberingSystem int

const (
  numberingSystemLatn numberingSystem = iota
{{- range $v := .NumberingSystemIota }}
  {{- if ne $v "latn" }}
  numberingSystem{{ title $v }}
  {{- end }}
{{- end }}
  numberingSystemLast
)

var numberingSystems = []digits{
{{- range $v := .NumberingSystems }}
  {{- if ne $v.ID "latn" }}
  numberingSystem{{ title $v.ID }}: {
    {{- range $char := $v.Digits }}{{ printf "'%c'" $char }},{{- end -}}
    },
  {{- end }}
{{- end }}
}
