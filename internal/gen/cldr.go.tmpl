package intl

// Code generated by "earthly +generate". DO NOT EDIT.

import (
  "cmp"
  "strings"
  "time"

  "golang.org/x/text/language"
)

type calendarMonths [12]string

var calendarMonthNames = [...]calendarMonths{
{{- range $calendarMonths := .Months.List }}
  {{ $calendarMonths }},
{{- end }}
}

// monthIndexes contains indexes of months names in Gregorian calendar, it has 6 indexes
// for all variations of "width" and "context".
//	0 - abbreviated, format
//	1 - abbreviated, stand-alone
//	2 - wide, format
//	3 - wide, stand-alone
//	4 - narrow, format
//	5 - narrow, stand-alone
type monthIndexes [6]int16

var monthLookup = map[string]monthIndexes{
{{- range $locale, $indexes := .Months.Lookup }}
  "{{ $locale }}": { {{ range $i, $v := $indexes }}{{ $v }},{{ end }} },
{{- end }}
}

type numberingSystem int

const (
  numberingSystemLatn numberingSystem = iota
{{- range $v := .NumberingSystemIota }}
  {{- if ne $v "latn" }}
  numberingSystem{{ title $v }}
  {{- end }}
{{- end }}
  numberingSystemLast
)

var numberingSystems = []digits{
{{- range $v := .NumberingSystems }}
  {{- if ne $v.ID "latn" }}
  numberingSystem{{ title $v.ID }}: {
    {{- range $char := $v.Digits }}{{ printf "'%c'" $char }},{{- end -}}
    },
  {{- end }}
{{- end }}
}

func defaultNumberingSystem(locale language.Tag) numberingSystem {
  s := locale.String()

  switch {
  default:
    return numberingSystemLatn
{{- range $system, $locales := .DefaultNumberingSystems }}
  case
  {{- range $i, $locale := $locales }}
    {{- if ne $locale "latn" }} s == "{{ $locale }}", strings.HasPrefix(s, "{{ $locale }}-"){{ if lt $i (sub (len $locales) 1) }},
{{ end }}
    {{- end }}
  {{- end }}:
    return numberingSystem{{ title $system }}
{{- end }}
  }
}

func defaultCalendar(locale language.Tag) calendarType {
  switch v, _ := locale.Region(); v.String() {
  default:
    return calendarTypeGregorian
{{- range $v := .CalendarPreferences }}
  {{- if ne (index $v.Calendars 0) "gregorian" }}
  case "{{ join $v.Regions "\", \"" }}":
    return calendarType{{ title (index $v.Calendars 0) }}
  {{- end }}
{{- end }}
  }
}

{{ range $calendarType, $formats := .DateTimeFormats }}
func fmtYear{{ title $calendarType }}(locale language.Tag) func(v string) string {
  lang, _ := locale.Base()

  switch lang.String() {
  default:
    return func(v string) string { return {{ $formats.Y.Default }} }
{{- range $fmt, $languages := $formats.Y.Fmt }}
  case "{{ join $languages "\", \"" }}":
    return func (v string) string { return {{ $fmt }} }
{{- end }}
  }
}

func fmtYearMonth{{ title $calendarType}}(locale language.Tag, digits digits, opts Options) func(y int, m time.Month) string {
  fmtYear := fmtYear(digits)
  fmtMonth := fmtMonth(digits)

  switch language, _ := locale.Base(); language.String() {
  default:
    return func(y int, m time.Month) string { {{ $formats.YM.Default }} }
{{- range $fmt, $languages := $formats.YM.Fmt }}
  case "{{ join $languages "\", \"" }}":
    return func(y int, m time.Month) string { {{ $fmt }} }
{{- end }}
  }
}

{{ if gt (len $formats.M.Fmt) 0 }}
func fmtMonth{{ title $calendarType }}(locale language.Tag, digits digits) func(v time.Month, opt Month) string {
  lang, _ := locale.Base()
{{ else }}
func fmtMonth{{ title $calendarType }}(_ language.Tag, digits digits) func(v time.Month, opt Month) string {
{{ end }}
{{ if eq (len $formats.M.Fmt) 0 }}
  return fmtMonth(digits)
{{ else }}
  switch lang.String() {
  default:
    return fmtMonth(digits)
  {{- range $fmt, $languages := $formats.M.Fmt }}
  case "{{ join $languages "\", \"" }}":
    {{ $fmt }}
  {{- end }}
  }
{{ end }} {{/* $formats.M.Fmt > 1*/}}
}

func fmtMonthDay{{ title $calendarType}}(locale language.Tag, digits digits, opts Options) func (m time.Month, d int) string {
  lang, _ := locale.Base()

  fmtMonth := fmtMonth(digits)
  fmtDay := fmtDay(digits)

  switch lang.String() {
  default:
    {{ $formats.MD.Default }}
  {{- range $fmt, $languages := $formats.MD.Fmt }}
  case "{{ join $languages "\", \"" }}":
    {{ $fmt }}
  {{- end }}
  }
}

{{ if gt (len $formats.D.Fmt) 0 }}
func fmtDay{{ title $calendarType }}(locale language.Tag, digits digits) func(v int, opt Day) string {
  lang, _ := locale.Base()
{{ else }}
func fmtDay{{ title $calendarType }}(_ language.Tag, digits digits) func(v int, opt Day) string {
{{ end }}
  fmt := fmtDay(digits)
{{ if eq (len $formats.D.Fmt) 0 }}
  return fmt
{{ else }}
  switch lang.String() {
  default:
    return fmt
  {{- range $fmt, $languages := $formats.D.Fmt }}
  case "{{ join $languages "\", \"" }}":
    return func(v int, opt Day) string { return {{ $fmt }} }
  {{- end }}
  }
{{ end }} {{/* $formats.D.Fmt > 1*/}}
}
{{ end }} {{/* $calendarType, $formats */}}
